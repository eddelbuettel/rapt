// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// buildDepends
std::vector<std::string> buildDepends(const std::string regexp);
RcppExport SEXP RcppAPT_buildDepends(SEXP regexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type regexp(regexpSEXP);
    rcpp_result_gen = Rcpp::wrap(buildDepends(regexp));
    return rcpp_result_gen;
END_RCPP
}
// showSrc
bool showSrc(const std::string regexp);
RcppExport SEXP RcppAPT_showSrc(SEXP regexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type regexp(regexpSEXP);
    rcpp_result_gen = Rcpp::wrap(showSrc(regexp));
    return rcpp_result_gen;
END_RCPP
}
// dumpPackages
bool dumpPackages(const std::string regexp);
RcppExport SEXP RcppAPT_dumpPackages(SEXP regexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type regexp(regexpSEXP);
    rcpp_result_gen = Rcpp::wrap(dumpPackages(regexp));
    return rcpp_result_gen;
END_RCPP
}
// getPackages
Rcpp::DataFrame getPackages(const std::string regexp);
RcppExport SEXP RcppAPT_getPackages(SEXP regexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type regexp(regexpSEXP);
    rcpp_result_gen = Rcpp::wrap(getPackages(regexp));
    return rcpp_result_gen;
END_RCPP
}
// hasPackages
Rcpp::LogicalVector hasPackages(Rcpp::CharacterVector pkg);
RcppExport SEXP RcppAPT_hasPackages(SEXP pkgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type pkg(pkgSEXP);
    rcpp_result_gen = Rcpp::wrap(hasPackages(pkg));
    return rcpp_result_gen;
END_RCPP
}
// reverseDepends
Rcpp::DataFrame reverseDepends(const std::string regexp);
RcppExport SEXP RcppAPT_reverseDepends(SEXP regexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type regexp(regexpSEXP);
    rcpp_result_gen = Rcpp::wrap(reverseDepends(regexp));
    return rcpp_result_gen;
END_RCPP
}
